AWSTemplateFormatVersion: 2010-09-09
Description: 'Inmersion Day General - Servicios Fundacionales - Web Server'

Parameters:
  DBPassword:
    NoEcho: 'false'
    Description: Database admin password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.


Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16 
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: INMD VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: INMD IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.1.0/24
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: 'false'
      Tags:
      - Key: Name
        Value: INMD Private Subnet 1
      VpcId: !Ref MyVPC


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.2.0/24
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: 'false'
      Tags:
      - Key: Name
        Value: INMD Private Subnet 2
      VpcId: !Ref MyVPC
      

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.3.0/24     
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: INMD Public Subnet 1
      VpcId: !Ref MyVPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.4.0/24     
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: INMD Public Subnet 2
      VpcId: !Ref MyVPC
      
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  WebServerEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIPAssociation2WebServer:
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt WebServerEIP2.AllocationId
      InstanceId: !Ref WebServer

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatGatewayEIP1
        - AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: INMD NatGW

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value:  INMD Public RT

  AttachPublicSubnet1RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1

  AttachPublicSubnet2RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2

  PublicRoutetoInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyVPC
      Tags:
      - Key: Name
        Value: INMD Private RT 

  AttachPrivateSubnet1RouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      SubnetId:
        Ref: PrivateSubnet1

  AttachPrivateSubnet1RouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      SubnetId:
        Ref: PrivateSubnet2

  PrivateRoutetoNatGateway1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway1
      RouteTableId:
        Ref: PrivateRouteTable1

  SecGroupWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SecGroup-WebServer
      GroupDescription: Security Group - Web Server
      VpcId: !Ref MyVPC
      SecurityGroupIngress:          
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: INMD SG WS

  SecGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SecGroup-DB
      GroupDescription: Security Group - DB Access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:          
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: INMD SG DB
  SecurityGroupIngress:            
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref SecGroupWebServer
      GroupId: !Ref SecGroupDB


  WebServer:
    Type: AWS::EC2::Instance
   # DependsOn: MySQLDB
    Properties:
      ImageId: ami-02f706d959cedf892   ## Amazon Linux 2 AMI (HVM), us-east-2
      InstanceType: t2.micro           ## free tier
      KeyName : santiago-latam-demo-us-east-2 
      PrivateIpAddress: 10.10.3.10
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize: 8
            VolumeType: gp2 
      SecurityGroupIds:
          - !Ref SecGroupWebServer
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: INMD WebServer     
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            
            #install mysql client
            sudo yum -y install mysql 
            
            #install nodeJS
            sudo yum -y update
            cd /home/ec2-user/
            sudo yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_11.x | sudo -E bash -
            sudo yum install -y nodejs

            #install httpd & git
            sudo yum -y install httpd
            sudo service httpd start 
            sudo yum -y install git

            #upload project
            mkdir express-api && cd express-api
            npm install body-parser express mysql request properties-reader
            git clone https://github.com/sbenavidez/inmersion-day-aws-simplewebserver.git

            #move to httpd
            mv inmersion-day-aws-simplewebserver/src/* .
            sed -i "s/REPLACE_URL/${WebServerEIP2}/g" index.html
            mv index.html /var/www/html/ 

            #replace properties values
            sed -i "s/HOST_PARAM/${MySQLDB.Endpoint.Address}/g" mysql.properties
            sed -i "s/USER_PARAM/INMD/g" mysql.properties
            sed -i "s/PWD_PARAM/${DBPassword}/g" mysql.properties
            sed -i "s/DB_PARAM/INMDDB/g" mysql.properties            

            #start node app
            node application.js

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'INMD Subnet group'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  MySQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: INMDDB
      AllocatedStorage: '30'
      StorageType: gp2
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: 'INMDDB-INSTANCE'
      EngineVersion: '5.6'
      Engine: MySQL
      MasterUsername: INMD
      MasterUserPassword: !Ref 'DBPassword'
      MultiAZ: 'false'
      Tags:
      - Key: Name
        Value: INMD DB
      VPCSecurityGroups:
        - !Ref SecGroupDB
      DBSubnetGroupName : !Ref DBSubnetGroup



